// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts         Account[]
  listings         Listing[]
  reservations     Reservation[]
  sentMessages     Message[]     @relation("MessageSender") // Messages sent by the user
  receivedMessages Message[]     @relation("MessageRecipient") // Messages received by the user
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String[]
  createdAt     DateTime @default(now())
  category      String
  locationValue String
  locationLat   Float? // Added latitude, optional
  locationLong  Float? // Added longitude, optional
  carType       String?
  deliveryPrice Int?
  imageProof    String[]
  userId        String   @db.ObjectId
  price         Int

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

// Message model for handling direct messaging between users.
model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String // Content of the message
  createdAt   DateTime @default(now()) // Timestamp of when the message was sent
  senderId    String   @db.ObjectId // ID of the user who sent the message
  recipientId String   @db.ObjectId // ID of the user who received the message

  sender    User @relation(name: "MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation(name: "MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
}
